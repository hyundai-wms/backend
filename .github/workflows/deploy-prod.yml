name: Deploy to Production

on:
  push:
    branches: [ "test-production" ] # todo : 나중에 production으로 변경 필요, test.* -> api.* 으로 변경하기

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest

  deploy-prod:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: build
    steps:
      # AWS CLI 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MYWHME_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MYWHME_AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      # 초기 서버 상태 확인
      - name: Check Initial Server States
        id: server-check
        run: |
          # 서버1 상태 확인
          SERVER1_STATUS=$(aws elbv2 describe-target-health \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_1 }} \
            --query 'TargetHealthDescriptions[0].TargetHealth.State' \
            --output text || echo "unused")
          
          # 서버2 상태 확인
          SERVER2_STATUS=$(aws elbv2 describe-target-health \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_2 }} \
            --query 'TargetHealthDescriptions[0].TargetHealth.State' \
            --output text || echo "unused")
          
          echo "SERVER1_STATUS=${SERVER1_STATUS}" >> $GITHUB_ENV
          echo "SERVER2_STATUS=${SERVER2_STATUS}" >> $GITHUB_ENV
          
          # 배포 순서 결정
          if [ "$SERVER1_STATUS" != "healthy" ] && [ "$SERVER2_STATUS" != "healthy" ]; then
            echo "DEPLOY_SEQUENCE=both" >> $GITHUB_ENV
          elif [ "$SERVER1_STATUS" != "healthy" ]; then
            echo "DEPLOY_SEQUENCE=server1-first" >> $GITHUB_ENV
          elif [ "$SERVER2_STATUS" != "healthy" ]; then
            echo "DEPLOY_SEQUENCE=server2-first" >> $GITHUB_ENV
          else
            echo "DEPLOY_SEQUENCE=normal" >> $GITHUB_ENV
          fi

      # 서버1 배포
      - name: Deploy to First Server
        if: env.DEPLOY_SEQUENCE != 'server2-first'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker network create myme-network || true
            docker stop backend-container || true
            docker rm backend-container || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest
            docker run -d \
              --name backend-container \
              --network myme-network \
              -p 8080:8080 \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MYWHME_AWS_S3_BUCKET=${{ secrets.MYWHME_AWS_S3_BUCKET }} \
              -e MYWHME_AWS_ACCESS_KEY=${{ secrets.MYWHME_AWS_ACCESS_KEY }} \
              -e MYWHME_AWS_SECRET_KEY=${{ secrets.MYWHME_AWS_SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest

      # 서버1 헬스 체크
      - name: Health check for First Server
        if: env.DEPLOY_SEQUENCE != 'server2-first'
        id: health-first
        run: |
          # Application Health Check
          for i in {1..10}; do
            if curl -s ${{ secrets.EC2_HOST_1 }}:8080/actuator/health | grep -q "UP"; then
              echo "Application health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Application health check failed"
              exit 1
            fi
            echo "Waiting for application to start... (attempt $i/10)"
            sleep 10
          done
          
          # Target Group에 등록
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_1 }}
          
          # ALB Target Health Check
          for i in {1..10}; do
            STATUS=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
              --targets Id=${{ secrets.EC2_ID_1 }} \
              --query 'TargetHealthDescriptions[0].TargetHealth.State' \
              --output text)
          
            if [ "$STATUS" = "healthy" ]; then
              echo "Target is healthy"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Target health check failed"
              exit 1
            fi
            echo "Waiting for target to become healthy... (attempt $i/10)"
            sleep 10
          done

      # 서버2가 healthy 상태이면 제거
      - name: Deregister Second Server if Healthy
        if: env.DEPLOY_SEQUENCE == 'normal' && env.SERVER2_STATUS == 'healthy'
        run: |
          aws elbv2 deregister-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_2 }}
          echo "Waiting for connection draining..."
          sleep 30

      # 서버2 배포
      - name: Deploy to Second Server
        if: env.DEPLOY_SEQUENCE != 'server1-first'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker network create myme-network || true
            docker stop backend-container || true
            docker rm backend-container || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest
            docker run -d \
              --name backend-container \
              --network myme-network \
              -p 8080:8080 \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MYWHME_AWS_S3_BUCKET=${{ secrets.MYWHME_AWS_S3_BUCKET }} \
              -e MYWHME_AWS_ACCESS_KEY=${{ secrets.MYWHME_AWS_ACCESS_KEY }} \
              -e MYWHME_AWS_SECRET_KEY=${{ secrets.MYWHME_AWS_SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest

      # 서버2 헬스 체크
      - name: Health check for Second Server
        if: env.DEPLOY_SEQUENCE != 'server1-first'
        id: health-second
        run: |
          # Application Health Check
          for i in {1..10}; do
            if curl -s ${{ secrets.EC2_HOST_2 }}:8080/actuator/health | grep -q "UP"; then
              echo "Application health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Application health check failed"
              exit 1
            fi
            echo "Waiting for application to start... (attempt $i/10)"
            sleep 10
          done
          
          # Target Group에 등록
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_2 }}
          
          # ALB Target Health Check
          for i in {1..10}; do
            STATUS=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
              --targets Id=${{ secrets.EC2_ID_2 }} \
              --query 'TargetHealthDescriptions[0].TargetHealth.State' \
              --output text)
          
            if [ "$STATUS" = "healthy" ]; then
              echo "Target is healthy"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Target health check failed"
              exit 1
            fi
            echo "Waiting for target to become healthy... (attempt $i/10)"
            sleep 10
          done

      # 롤백 단계 (실패 시 실행)
      - name: Rollback deployment
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          
          # 초기 상태로 복구
          if [ "$SERVER1_STATUS" = "healthy" ]; then
            aws elbv2 register-targets \
              --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
              --targets Id=${{ secrets.EC2_ID_1 }}
          fi
          
          if [ "$SERVER2_STATUS" = "healthy" ]; then
            aws elbv2 register-targets \
              --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
              --targets Id=${{ secrets.EC2_ID_2 }}
          fi
          
          echo "Rollback completed. Please check server status manually."