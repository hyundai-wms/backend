name: Deploy to Production

on:
  push:
    branches: [ "test-production" ] # todo : 나중에 production으로 변경 필요, test.* -> api.* 으로 변경하기

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest

  deploy-prod:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: build
    steps:
      # AWS CLI 설정 추가
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MYWHME_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MYWHME_AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      # 서버1을 Target Group에서 제외
      - name: Deregister First Server
        run: |
          aws elbv2 deregister-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_1 }}
          # 기존 연결이 종료될 때까지 대기
          echo "Waiting for connection draining..."
          sleep 30

      # 첫 번째 서버 배포
      - name: Deploy to First Server
        id: deploy-first
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker network create myme-network || true
            docker stop backend-container || true
            docker rm backend-container || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest
            docker run -d \
              --name backend-container \
              --network myme-network \
              --log-driver=awslogs \
              --log-opt awslogs-region=ap-northeast-2 \
              --log-opt awslogs-group=mywarehome-backend-logs \
              --log-opt awslogs-stream=$(hostname)-backend \
              -p 8080:8080 \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MYWHME_AWS_S3_BUCKET=${{ secrets.MYWHME_AWS_S3_BUCKET }} \
              -e MYWHME_AWS_ACCESS_KEY=${{ secrets.MYWHME_AWS_ACCESS_KEY }} \
              -e MYWHME_AWS_SECRET_KEY=${{ secrets.MYWHME_AWS_SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest

      # 첫 번째 서버 Health Check
      - name: Health check for First Server
        id: health-first
        run: |
          # Application Health Check
          for i in {1..10}; do
            if curl -s ${{ secrets.EC2_HOST_1 }}:8080/actuator/health | grep -q "UP"; then
              echo "Application health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Application health check failed"
              exit 1
            fi
            echo "Waiting for application to start... (attempt $i/10)"
            sleep 10
          done
          
          # ALB Target Health Check
          for i in {1..10}; do
            STATUS=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
              --targets Id=${{ secrets.EC2_ID_1 }} \
              --query 'TargetHealthDescriptions[0].TargetHealth.State' \
              --output text)
          
            if [ "$STATUS" = "healthy" ]; then
              echo "Target is healthy"
              exit 0
            fi
            echo "Waiting for target to become healthy... (attempt $i/10)"
            sleep 10
          done
          echo "Target health check failed"
          exit 1

      # 서버1을 다시 Target Group에 등록하고, 서버2를 제외
      - name: Switch Traffic
        run: |
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_1 }}
          aws elbv2 deregister-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_2 }}
          # 트래픽 전환 대기
          echo "Waiting for traffic switch..."
          sleep 30

      # 두 번째 서버 배포
      - name: Deploy to Second Server
        id: deploy-second
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker network create myme-network || true
            docker stop backend-container || true
            docker rm backend-container || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest
            docker run -d \
              --name backend-container \
              --network myme-network \
              --log-driver=awslogs \
              --log-opt awslogs-region=ap-northeast-2 \
              --log-opt awslogs-group=mywarehome-backend-logs \
              --log-opt awslogs-stream=$(hostname)-backend \
              -p 8080:8080 \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e MYWHME_AWS_S3_BUCKET=${{ secrets.MYWHME_AWS_S3_BUCKET }} \
              -e MYWHME_AWS_ACCESS_KEY=${{ secrets.MYWHME_AWS_ACCESS_KEY }} \
              -e MYWHME_AWS_SECRET_KEY=${{ secrets.MYWHME_AWS_SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKERHUB_USERNAME }}/mywarehome-backend:latest

      # 두 번째 서버 Health Check
      - name: Health check for Second Server
        id: health-second
        run: |
          # Application Health Check
          for i in {1..10}; do
            if curl -s ${{ secrets.EC2_HOST_2 }}:8080/actuator/health | grep -q "UP"; then
              echo "Application health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Application health check failed"
              exit 1
            fi
            echo "Waiting for application to start... (attempt $i/10)"
            sleep 10
          done
          
          # ALB Target Health Check
          for i in {1..10}; do
            STATUS=$(aws elbv2 describe-target-health \
              --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
              --targets Id=${{ secrets.EC2_ID_2 }} \
              --query 'TargetHealthDescriptions[0].TargetHealth.State' \
              --output text)
          
            if [ "$STATUS" = "healthy" ]; then
              echo "Target is healthy"
              exit 0
            fi
            echo "Waiting for target to become healthy... (attempt $i/10)"
            sleep 10
          done
          echo "Target health check failed"
          exit 1

      # 서버2를 다시 Target Group에 등록
      - name: Restore Traffic
        run: |
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_2 }}

      # 롤백 단계 (실패 시 실행)
      - name: Rollback deployment
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          # 두 서버 모두 Target Group에 다시 등록
          aws elbv2 register-targets \
            --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} \
            --targets Id=${{ secrets.EC2_ID_1 }} Id=${{ secrets.EC2_ID_2 }}
          
          echo "Rollback completed. Please check server status manually."